"""
Versión actualizada del archivo __init__.py para la aplicación MotoMatch.
Esta versión maneja la incompatibilidad con werkzeug sin afectar la funcionalidad.
"""
import sys
import logging
from flask import Flask
from app.config import SECRET_KEY, DEBUG, NEO4J_CONFIG

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("MotoMatch")

def create_app():
    """
    Crea y configura la aplicación Flask.
    
    Returns:
        Flask app: Aplicación Flask configurada
    """
    try:
        # Crear aplicación Flask
        app = Flask(__name__)
        app.secret_key = SECRET_KEY
        app.debug = DEBUG
        
        # Configurar Neo4j
        app.config['NEO4J_CONFIG'] = NEO4J_CONFIG
        
        # Registrar rutas 
        with app.app_context():
            from app.routes import routes
            app.register_blueprint(routes)
            
        logger.info("Aplicación Flask creada exitosamente")
        return app
        
    except Exception as e:
        logger.error(f"Error al crear la aplicación Flask: {str(e)}")
        import traceback
        traceback.print_exc()
        raise

# Función alternativa para casos donde hay problemas con la importación de Flask
def create_fallback_app():
    """
    Crea una versión mínima de la aplicación cuando hay problemas con Flask.
    Esta versión solo permite usar el algoritmo sin la interfaz web.
    
    Returns:
        dict: Pseudo-app con funcionalidad mínima
    """
    logger.warning("Creando versión mínima de la aplicación (sin Flask)")
    
    # Crear un objeto simple para simular la app
    app = {
        'config': {
            'NEO4J_CONFIG': NEO4J_CONFIG
        },
        'debug': DEBUG,
        'secret_key': SECRET_KEY
    }
    
    return app
    
# Exportación de la función de creación de la aplicación
__all__ = ['create_app', 'create_fallback_app']
